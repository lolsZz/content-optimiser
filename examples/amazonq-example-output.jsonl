{"prefix":"import boto3\n\ndef create_s3_bucket(bucket_name, region=None):\n    \"\"\"Create an S3 bucket in a specified region\n\n    If a region is not specified, the bucket is created in the S3 default\n    region (us-east-1).\n\n    :param bucket_name: Bucket to create\n    :param region: String region to create bucket in, e.g., 'us-west-2'\n    :return: True if bucket created, else False\n    \"\"\"", "completion": "    # Create bucket\n    try:\n        if region is None:\n            s3_client = boto3.client('s3')\n            s3_client.create_bucket(Bucket=bucket_name)\n        else:\n            s3_client = boto3.client('s3', region_name=region)\n            location = {'LocationConstraint': region}\n            s3_client.create_bucket(Bucket=bucket_name,\n                                    CreateBucketConfiguration=location)\n        return True\n    except Exception as e:\n        print(f\"Error creating bucket: {e}\")\n        return False", "language": "python", "source_file": "s3_operations.py", "file_context": "AWS S3 bucket creation utility functions"}
{"prefix":"const AWS = require('aws-sdk');\n\n/**\n * Create a DynamoDB table with the specified name and key schema\n * @param {string} tableName - The name of the DynamoDB table to create\n * @param {string} primaryKey - The primary key attribute name\n * @param {string} sortKey - Optional sort key attribute name\n * @returns {Promise} - Promise representing the table creation\n */\nasync function createDynamoDBTable(tableName, primaryKey, sortKey = null) {", "completion": "  const dynamodb = new AWS.DynamoDB();\n  \n  const params = {\n    TableName: tableName,\n    KeySchema: [\n      { AttributeName: primaryKey, KeyType: 'HASH' },\n    ],\n    AttributeDefinitions: [\n      { AttributeName: primaryKey, AttributeType: 'S' },\n    ],\n    ProvisionedThroughput: {\n      ReadCapacityUnits: 5,\n      WriteCapacityUnits: 5\n    }\n  };\n  \n  // Add sort key if provided\n  if (sortKey) {\n    params.KeySchema.push({ AttributeName: sortKey, KeyType: 'RANGE' });\n    params.AttributeDefinitions.push({ AttributeName: sortKey, AttributeType: 'S' });\n  }\n  \n  try {\n    const result = await dynamodb.createTable(params).promise();\n    console.log(`Created table ${tableName}`);\n    return result;\n  } catch (error) {\n    console.error(`Unable to create table ${tableName}: ${error.message}`);\n    throw error;\n  }", "language": "javascript", "source_file": "dynamodb_operations.js", "file_context": "AWS DynamoDB table creation utilities"}
{"prefix":"using Amazon.Lambda.Core;\nusing Amazon.Lambda.APIGatewayEvents;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace MyLambdaFunction\n{\n    public class Function\n    {\n        /// <summary>\n        /// Lambda handler to process API Gateway requests\n        /// </summary>\n        /// <param name=\"request\">API Gateway proxy request</param>\n        /// <param name=\"context\">Lambda context</param>\n        /// <returns>API Gateway proxy response</returns>\n        public async Task<APIGatewayProxyResponse> FunctionHandler(APIGatewayProxyRequest request, ILambdaContext context)\n        {", "completion": "            context.Logger.LogInformation($\"Processing request for path: {request.Path}\");\n            \n            // Default response\n            var response = new APIGatewayProxyResponse\n            {\n                StatusCode = 200,\n                Headers = new Dictionary<string, string> \n                { \n                    { \"Content-Type\", \"application/json\" },\n                    { \"Access-Control-Allow-Origin\", \"*\" }\n                }\n            };\n            \n            try\n            {\n                // Process based on HTTP method\n                switch (request.HttpMethod.ToUpper())\n                {\n                    case \"GET\":\n                        var data = new { message = \"Hello from Lambda!\", timestamp = DateTime.UtcNow };\n                        response.Body = JsonSerializer.Serialize(data);\n                        break;\n                        \n                    case \"POST\":\n                        // Parse request body\n                        if (string.IsNullOrEmpty(request.Body))\n                        {\n                            response.StatusCode = 400;\n                            response.Body = JsonSerializer.Serialize(new { error = \"Missing request body\" });\n                            break;\n                        }\n                        \n                        // Echo back the request with timestamp\n                        var requestData = JsonSerializer.Deserialize<JsonElement>(request.Body);\n                        var responseData = new { receivedData = requestData, processedAt = DateTime.UtcNow };\n                        response.Body = JsonSerializer.Serialize(responseData);\n                        break;\n                        \n                    default:\n                        response.StatusCode = 405; // Method not allowed\n                        response.Body = JsonSerializer.Serialize(new { error = \"Method not supported\" });\n                        break;\n                }\n            }\n            catch (Exception ex)\n            {\n                // Handle exceptions\n                context.Logger.LogError($\"Error processing request: {ex.Message}\");\n                response.StatusCode = 500;\n                response.Body = JsonSerializer.Serialize(new { error = \"Internal server error\" });\n            }\n            \n            return response;", "language": "csharp", "source_file": "Function.cs", "file_context": "AWS Lambda API Gateway handler"}
